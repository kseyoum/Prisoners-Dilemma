// Kirubel Seyoum
// ITP 165, Fall 2018
// Homework 10
// kseyoum@usc.edu
//  main.cpp
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/7/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#include <iostream>
#include "Jail.h"
using namespace std;
int main(int argc, const char * argv[]) {
    
    //create an object for jail to use the run and standing functions
    Jail *object=new Jail;
    object-> run();
    object-> standings();
    //delete the object after it has been used to run through functions
    delete object;
    
    
    return 0;
}


//
//  Player.h
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#ifndef Player_h
#define Player_h
#include <iostream>

#include <stdio.h>
using namespace std;

const int rounds = 200;
//creation of player class
class Player
{
protected:
    char yourChoices[rounds];
    int score;
    string name;
public:
    //declare functions of class
    //constructor
    Player (string playerName);
    virtual char play(int)=0;
    void record (int, char);
    void addToScore (int);
    void report();
    virtual ~Player();
    
};
#endif /* Player_h */


//
//  Player.cpp
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#include "Player.h"
using namespace std;
//This function is a constructor
//It is called player
//It assigns a string to the name variable in the player class, Also initializes the score variable
//Takes in a string variable
Player:: Player (string playerName)
{
    name=playerName;
    score=0;
}
// Function is a void
// Function is called record
// Function records whether the player played C or D
// The function takes in the integer amount of rounds and the char played
void Player:: record (int rounds, char corD)
{
    yourChoices[rounds]=corD;
}
//Function is a void
//Function is called addToScore
//The function adds the current round score of the player to their overall score
//The function takes in the score that the user got that round and adds it to their overall score
void Player:: addToScore (int roundScore)
{
    score+=roundScore;
}
void Player:: report()
{
    std::cout<< name << std::endl;
    std::cout<< score << std::endl;
}
//Function is a virtual destructor
//Function is called ~Player
//The function destroys all the information previously stored into the class
//The function doesn't take in anything
Player::~Player()
{
    
}


//
//  Nice.h
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#ifndef Nice_h
#define Nice_h

#include <stdio.h>
#include <iostream>
#include "Player.h"


using namespace std;

//creation of Nice class
class Nice:public Player
{
protected:
    char play(int currentRound);
    
//declare functions of class
public:
    Nice(string niceString);
    
};


#endif /* Nice_h */


//
//  Nice.cpp
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#include "Nice.h"
#include <iostream>

using namespace std;

//This function is a constructor
//This function sets the niceString as the class name
//This function is called nice
//This function takes in a string
Nice::Nice(string niceString):Player(niceString)
{
    
}

//This function returns a char
//This function is called Play
//This function takes in the current round of the game
//This function returns what the specific player plays on each round
char Nice::play(int currentRound)
{
    return 'c';
}


//
//  Mean.h
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#ifndef Mean_h
#define Mean_h

#include <stdio.h>
#include <iostream>
#include "Player.h"
using namespace std;

//Creation of mean class
class Mean:public Player
{
protected:
    char play(int currentRound);
    
//declare functions of class
public:
    Mean(string MeanString);
    
};

#endif /* Mean_h */

//
//  Mean.cpp
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#include "Mean.h"
#include <iostream>
using namespace std;
//This function is a constructor
//This function sets the MeanString as the class name
//This function is called Mean
//This function takes in a string
Mean::Mean(string MeanString):Player(MeanString)
{
    
}
//This function returns a char
//This function is called Play
//This function takes in the current round of the game
//This function returns what the specific player plays on each round
char Mean::play(int currentRound)
{
    return 'd';
}


//
//  TFT.h
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#ifndef TFT_h
#define TFT_h

#include <stdio.h>
#include <iostream>
#include "Player.h"
using namespace std;

//Creation of TFT class
class TFT:public Player
{
protected:
    char play(int currentRound);
    
    //declare functions of class
public:
    TFT(string tftString);
    
};

#endif /* TFT_h */


//
//  TFT.cpp
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#include "TFT.h"
#include <iostream>
using namespace std;

//This function is a constructor
//This function sets the tftString as the class name
//This function is called TFT
//This function takes in a string
TFT::TFT(string tftString):Player(tftString)
{
    
}
//This function returns a char
//This function is called Play
//This function takes in the current round of the game
//This function returns what the specific player plays on each round
char TFT::play(int currentRound)
{
    if (currentRound==0)
    {
        return 'c';
    }
    else
        return yourChoices[currentRound-1];
}

//
//  Kseyoum.h
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#ifndef Kseyoum_h
#define Kseyoum_h

#include <stdio.h>
#include "Player.h"
using namespace std;
//Creation of Kseyoum class
class Kseyoum:public Player
{
protected:
    char play(int currentRound);
    
public:
    //declare functions of class
    Kseyoum(string KseyoumString);
    
};

#endif /* Kseyoum_h */


//
//  Kseyoum.cpp
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#include "Kseyoum.h"
using namespace std;

//This function is a constructor
//This function sets the KseyoumString as the class name
//This function is called Kseyoum
//This function takes in a string
Kseyoum::Kseyoum(string KseyoumString):Player(KseyoumString)
{
    
}
//This function returns a char
//This function is called Play
//This function takes in the current round of the game
//This function returns what the specific player plays on each round
char Kseyoum::play(int currentRound)
{
    return 'd';
}


//
//  Jail.h
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#ifndef Jail_h
#define Jail_h

#include <stdio.h>
#include <iostream>
#include "Player.h"
using namespace std;
//Creation of jail class
class Jail
{
protected:
    //Creation of players vector using Player
    vector<Player*> *players;
    int playerCount;
public:
    //functions declared 
    Jail ();
    int run();
    int slap(char First,char Second);
    int standings();
    ~Jail();
    
};

#endif /* Jail_h */


// Kirubel Seyoum
// ITP 165, Fall 2018
// Homework 10
// kseyoum@usc.edu
//  Jail.cpp
//  Homework 10
//
//  Created by Kirubel Seyoum on 11/19/18.
//  Copyright © 2018 Kirubel Seyoum. All rights reserved.
//

#include "Jail.h"
#include "Nice.h"
#include "Mean.h"
#include "TFT.h"
#include "Kseyoum.h"
#include <iostream>
#include <vector>
using namespace std;
//This function is a constructor
//The function is called Jail
//The function initializes the vector and makes room for the players
//The function doesn't take in anything
Jail::Jail()
{
    players=new vector<Player*>;
    players->push_back(new Nice("Nice1"));
    players->push_back(new Nice("Nice2"));
    players->push_back(new Mean("Mean1"));
    players->push_back(new Mean("Mean2"));
    players->push_back(new TFT("TFT1"));
    players->push_back(new TFT("TFT2"));
    players->push_back(new Kseyoum("Kseyoum1"));
    players->push_back(new Kseyoum("Kseyoum2"));

    
}
//This function runs the game for all 8 players
//This function is called run
//The function returns a score value
//This function doesn't bring in anything
int Jail:: run()
{
    
    
        for (int i=0;i<players->size();i++)
        {
            for (int j=0; j<players->size(); j++)
            {
                if (i!=j)
                {
                    
                    for (int nowRound=0; nowRound<200; nowRound++)
                    {
                        char playerChar1 = (*players)[i]->play(nowRound);
                        char playerChar2 = (*players)[j]->play(nowRound);
                        int randomNum=rand() % 19;
                        if (randomNum==20)
                            {
                                playerChar1='d';
                            }
                        if (randomNum==1)
                            {
                                playerChar2='d';
                            }
                        (*players)[i]->record(nowRound, playerChar2);
                        (*players)[j]->record(nowRound, playerChar1);
                        (*players)[i]->addToScore(slap(playerChar1,playerChar2));
                        (*players)[j]->addToScore(slap(playerChar2,playerChar1));
                    }
                    
                }
            }
        }
    return 0;
}

//This function is called slap
//Purpose is to return values for the player based off each scenario
//This function takens in two chars
//This function returns integer values
int Jail:: slap(char First,char Second)
{
    if (First=='c'& Second== 'c')
    {
        return 2;
    }
    if (First=='c'& Second== 'd')
    {
        return 0;
    }
    if (First=='d'& Second=='c')
    {
        return 3;
    }
    if (First=='d'& Second== 'd')
    {
        return 1;
    }
return 0;
}

//The function is called standings
//The function reports the scores of each player at the end of the game
//The function returns 8 integer values
//The function doesn't bring in anything
int Jail:: standings()
{
    for (int i = 0; i<players->size(); i++)
    {
        (*players)[i]->report();
    }
    return 0;
}
//Function is a destructor
//Function is called ~Jail
//The function destroys all the information previously stored into the vector
//The function doesn't take in anything
Jail::~Jail()
{
    for (int i=0; i<players->size(); i++)
    {
        delete (*players)[i];
    }
    
    delete players;
}
